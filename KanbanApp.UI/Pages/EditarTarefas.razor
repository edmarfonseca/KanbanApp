@page "/editar-tarefa/{id:guid}"

<div class="m-4">
    <div class="card">
        <div class="card-body">

            <h3 class="mt-2">Edição de Tarefas</h3>

            @if (!string.IsNullOrEmpty(mensagemSucesso))
            {
                <div class="alert alert-success">
                    <strong>@mensagemSucesso</strong>
                </div>
            }

            @if (!string.IsNullOrEmpty(mensagemErro))
            {
                <div class="alert alert-danger">
                    <strong>@mensagemErro</strong>
                </div>
            }

            <hr />

            <EditForm Model="@model" OnValidSubmit="@OnSubmit">

                @* Habilitando as validações *@
                <DataAnnotationsValidator />

                <div class="mb-2">
                    <label>Título da tarefa:</label>
                    <InputText type="text" class="form-control" @bind-Value="@model.Titulo" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => model.Titulo)" />
                    </div>
                </div>

                <div class="mb-2">
                    <label>Data da tarefa:</label>
                    <InputText type="date" class="form-control" @bind-Value="@model.DataHora" />
                    <div class="text-danger">
                        <ValidationMessage For="@(() => model.DataHora)" />
                    </div>
                </div>

                <div class="mb-2">
                    <label>Descrição:</label>
                    <InputTextArea class="form-control" @bind-Value="@model.Descricao"></InputTextArea>
                    <div class="text-danger">
                        <ValidationMessage For="@(() => model.Descricao)" />
                    </div>
                </div>

                <div class="mb-2">
                    <label>Status:</label>
                    <InputSelect class="form-select" @bind-Value="@model.Status">
                        <option value="">Escolha um status</option>
                        <option value="1">A Fazer</option>
                        <option value="2">Fazendo</option>
                        <option value="3">Finalizado</option>
                    </InputSelect>
                    <div class="text-danger">
                        <ValidationMessage For="@(() => model.Status)" />
                    </div>
                </div>

                <div class="mb-2">
                    <input type="submit" class="btn btn-success" value="Atualizar Tarefa" />
                </div>

            </EditForm>

        </div>
    </div>
</div>


@using KanbanApp.UI.Services
@using KanbanApp.UI.Models
@using KanbanApp.UI.Settings
@using KanbanApp.UI.Dtos

@inject AuthService Auth
@inject NavigationManager Navigation
@inject HttpClient Http

@code {

    [Parameter]
    public Guid Id { get; set; }

    private EditarTarefaViewModel model = new EditarTarefaViewModel();

    private string mensagemSucesso;
    private string mensagemErro;

    protected override async Task OnInitializedAsync()
    {
        if (!await Auth.IsLoggedIn()) Navigation.NavigateTo("/", true);

        mensagemSucesso = string.Empty;
        mensagemErro = string.Empty;

        try
        {
            Http.DefaultRequestHeaders.Authorization
                = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", await Auth.GetAccessToken());

            var response = await Http.GetAsync(HttpClientSettings.Tarefas + "/" + Id);
            if (response.IsSuccessStatusCode)
            {
                var tarefa = await response.Content.ReadFromJsonAsync<TarefaResponseDto>();

                model.Titulo = tarefa.Titulo;
                model.Descricao = tarefa.Descricao;
                model.DataHora = tarefa.DataHora.ToString("yyyy-MM-dd");
                model.Status = tarefa.Status.Valor.ToString();
            }
            else
                mensagemErro = "Não foi possível consultar tarefa.";
        }
        catch (Exception e)
        {
            mensagemErro = "Falha ao consultar a tarefa: " + e.Message;
        }
    }

    private async Task OnSubmit()
    {
        mensagemSucesso = string.Empty;
        mensagemErro = string.Empty;

        try
        {
            Http.DefaultRequestHeaders.Authorization
                = new System.Net.Http.Headers.AuthenticationHeaderValue("bearer", await Auth.GetAccessToken());

            var response = await Http.PutAsJsonAsync(HttpClientSettings.Tarefas + "/" + Id, model);
            if (response.IsSuccessStatusCode)
            {
                mensagemSucesso = "Tarefa atualizada com sucesso.";
            }
            else
                mensagemErro = "Não foi possível atualizar a tarefa.";
        }
        catch (Exception e)
        {
            mensagemErro = "Falha ao atualizar a tarefa: " + e.Message;
        }
    }
}